import os
import logging
from PIL import Image, ImageFilter, ImageEnhance, ImageOps, ImageDraw, ImageFont
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import random
import textwrap

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô!)
BOT_TOKEN = "YOUR_BOT_TOKEN"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("temp", exist_ok=True)
os.makedirs("fonts", exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton('üé® –≠—Ñ—Ñ–µ–∫—Ç—ã'),
        KeyboardButton('‚úÇÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'),
        KeyboardButton('üñºÔ∏è –†–∞–º–∫–∏'),
        KeyboardButton('üî† –¢–µ–∫—Å—Ç'),
        KeyboardButton('üåü –ü—Ä–µ–º–∏—É–º'),
        KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    ]
    markup.add(*buttons)
    return markup


def effects_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton('‚ö´ –ß/–ë'),
        KeyboardButton('üü´ –°–µ–ø–∏—è'),
        KeyboardButton('üîç –†–µ–∑–∫–æ—Å—Ç—å'),
        KeyboardButton('üå´Ô∏è –†–∞–∑–º—ã—Ç–∏–µ'),
        KeyboardButton('üìù –≠—Å–∫–∏–∑'),
        KeyboardButton('üé≠ –í–∏–Ω—Ç–∞–∂'),
        KeyboardButton('üåà –Ø—Ä–∫–æ—Å—Ç—å+'),
        KeyboardButton('üåô –ö–æ–Ω—Ç—Ä–∞—Å—Ç+'),
        KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    ]
    markup.add(*buttons)
    return markup


def tools_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton('üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç—å'),
        KeyboardButton('‚úÇÔ∏è –û–±—Ä–µ–∑–∞—Ç—å'),
        KeyboardButton('üìè –†–∞–∑–º–µ—Ä'),
        KeyboardButton('üéØ –û–±—Ä–µ–∑–∞—Ç—å –∫—Ä—É–≥'),
        KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    ]
    markup.add(*buttons)
    return markup


def frames_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton('üñºÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è'),
        KeyboardButton('üì∏ –ü–æ–ª—è—Ä–æ–∏–¥'),
        KeyboardButton('‚≠ê –ó–æ–ª–æ—Ç–∞—è'),
        KeyboardButton('üéûÔ∏è –ü–ª–µ–Ω–∫–∞'),
        KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    ]
    markup.add(*buttons)
    return markup


def text_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton('üí¨ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'),
        KeyboardButton('üòÇ –°–æ–∑–¥–∞—Ç—å –º–µ–º'),
        KeyboardButton('üî° –®—Ä–∏—Ñ—Ç—ã'),
        KeyboardButton('üé® –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞'),
        KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    ]
    markup.add(*buttons)
    return markup


# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    user_states[user_id] = {'current_menu': 'main'}

    welcome_text = """
    üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhotoMagicBot!* üéâ

    ‚ú® *–Ø –º–æ–≥—É:* 
    ‚Ä¢ –ü—Ä–∏–º–µ–Ω—è—Ç—å –∫—Ä—É—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Ñ–æ—Ç–æ
    ‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–º—ã
    ‚Ä¢ –û–±—Ä–µ–∑–∞—Ç—å –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–∞–º–∫–∏
    ‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

    üì∏ *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!*

    üöÄ *–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ*
    """

    bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    ü§ñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*

    1. üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ* - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    2. üé® *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    3. ‚ö° *–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç* - –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ—Ç–æ

    ‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
    ‚Ä¢ üé® –≠—Ñ—Ñ–µ–∫—Ç—ã - —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    ‚Ä¢ ‚úÇÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –æ–±—Ä–µ–∑–∫–∞, –ø–æ–≤–æ—Ä–æ—Ç, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    ‚Ä¢ üñºÔ∏è –†–∞–º–∫–∏ - –∫—Ä–∞—Å–∏–≤—ã–µ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ
    ‚Ä¢ üî† –¢–µ–∫—Å—Ç - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–¥–ø–∏—Å–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–æ–≤

    üí° *–°–æ–≤–µ—Ç:* –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏!
    """

    bot.send_message(
        message.chat.id,
        help_text,
        parse_mode='Markdown',
        reply_markup=main_menu()
    )


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        user_id = message.chat.id

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        original_path = f"temp/{user_id}_original.jpg"
        with open(original_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        if user_id not in user_states:
            user_states[user_id] = {}
        user_states[user_id]['has_photo'] = True

        bot.send_message(
            message.chat.id,
            "‚úÖ *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!* –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üé®",
            parse_mode='Markdown',
            reply_markup=main_menu()
        )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")
        logging.error(f"Error handling photo: {e}")


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.chat.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    has_photo = user_states.get(user_id, {}).get('has_photo', False)

    if not has_photo and text not in ['‚ùì –ü–æ–º–æ—â—å', '/start', '/help']:
        bot.send_message(
            message.chat.id,
            "üì∏ *–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ!* –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            parse_mode='Markdown',
            reply_markup=main_menu()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        user_states[user_id]['current_menu'] = 'main'
        bot.send_message(message.chat.id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif text == 'üé® –≠—Ñ—Ñ–µ–∫—Ç—ã':
        user_states[user_id]['current_menu'] = 'effects'
        bot.send_message(message.chat.id, "üé® –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç:", reply_markup=effects_menu())

    elif text == '‚úÇÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
        user_states[user_id]['current_menu'] = 'tools'
        bot.send_message(message.chat.id, "‚öíÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=tools_menu())

    elif text == 'üñºÔ∏è –†–∞–º–∫–∏':
        user_states[user_id]['current_menu'] = 'frames'
        bot.send_message(message.chat.id, "üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–º–∫—É:", reply_markup=frames_menu())

    elif text == 'üî† –¢–µ–∫—Å—Ç':
        user_states[user_id]['current_menu'] = 'text'
        bot.send_message(message.chat.id, "üî† –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=text_menu())

    elif text == '‚ùì –ü–æ–º–æ—â—å':
        send_help(message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    elif text == '‚ö´ –ß/–ë':
        apply_effect(message, 'black_white')
    elif text == 'üü´ –°–µ–ø–∏—è':
        apply_effect(message, 'sepia')
    elif text == 'üîç –†–µ–∑–∫–æ—Å—Ç—å':
        apply_effect(message, 'sharpen')
    elif text == 'üå´Ô∏è –†–∞–∑–º—ã—Ç–∏–µ':
        apply_effect(message, 'blur')
    elif text == 'üìù –≠—Å–∫–∏–∑':
        apply_effect(message, 'sketch')
    elif text == 'üé≠ –í–∏–Ω—Ç–∞–∂':
        apply_effect(message, 'vintage')
    elif text == 'üåà –Ø—Ä–∫–æ—Å—Ç—å+':
        apply_effect(message, 'brightness')
    elif text == 'üåô –ö–æ–Ω—Ç—Ä–∞—Å—Ç+':
        apply_effect(message, 'contrast')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    elif text == 'üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç—å':
        rotate_image(message)
    elif text == '‚úÇÔ∏è –û–±—Ä–µ–∑–∞—Ç—å':
        bot.send_message(message.chat.id, "‚úÇÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (–ø–æ–∫–∞–∂–∏—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏)")
    elif text == 'üìè –†–∞–∑–º–µ—Ä':
        resize_image(message)
    elif text == 'üéØ –û–±—Ä–µ–∑–∞—Ç—å –∫—Ä—É–≥':
        crop_circle(message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–º–æ–∫
    elif text in ['üñºÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', 'üì∏ –ü–æ–ª—è—Ä–æ–∏–¥', '‚≠ê –ó–æ–ª–æ—Ç–∞—è', 'üéûÔ∏è –ü–ª–µ–Ω–∫–∞']:
        frame_type = text.split(' ')[1].lower()
        add_frame(message, frame_type)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    elif text == 'üí¨ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç':
        bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ç–æ:")
        user_states[user_id]['waiting_for_text'] = True

    elif text == 'üòÇ –°–æ–∑–¥–∞—Ç—å –º–µ–º':
        create_meme(message)

    else:
        if user_states.get(user_id, {}).get('waiting_for_text'):
            add_text_to_image(message, text)
            user_states[user_id]['waiting_for_text'] = False
        else:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())


# ===== –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
def apply_effect(message, effect_type):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        if not os.path.exists(original_path):
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
            return

        with Image.open(original_path) as img:
            if effect_type == 'black_white':
                result = img.convert("L")
                caption = "‚úÖ –ß—ë—Ä–Ω–æ-–±–µ–ª—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω!"

            elif effect_type == 'sepia':
                result = apply_sepia_filter(img)
                caption = "‚úÖ –≠—Ñ—Ñ–µ–∫—Ç —Å–µ–ø–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω!"

            elif effect_type == 'sharpen':
                result = img.filter(ImageFilter.SHARPEN)
                caption = "‚úÖ –†–µ–∑–∫–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞!"

            elif effect_type == 'blur':
                result = img.filter(ImageFilter.BLUR)
                caption = "‚úÖ –†–∞–∑–º—ã—Ç–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!"

            elif effect_type == 'sketch':
                result = img.filter(ImageFilter.CONTOUR)
                caption = "‚úÖ –≠—Å–∫–∏–∑ —Å–æ–∑–¥–∞–Ω!"

            elif effect_type == 'vintage':
                result = apply_vintage_filter(img)
                caption = "‚úÖ –í–∏–Ω—Ç–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω!"

            elif effect_type == 'brightness':
                enhancer = ImageEnhance.Brightness(img)
                result = enhancer.enhance(1.5)
                caption = "‚úÖ –Ø—Ä–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞!"

            elif effect_type == 'contrast':
                enhancer = ImageEnhance.Contrast(img)
                result = enhancer.enhance(1.5)
                caption = "‚úÖ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞!"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_path = f"temp/{user_id}_result.jpg"
            result.save(result_path, "JPEG", quality=95)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=caption,
                    reply_markup=main_menu()
                )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
        logging.error(f"Error applying effect {effect_type}: {e}")


def apply_sepia_filter(img):
    width, height = img.size
    pixels = img.load()

    for py in range(height):
        for px in range(width):
            r, g, b = img.getpixel((px, py))

            tr = int(0.393 * r + 0.769 * g + 0.189 * b)
            tg = int(0.349 * r + 0.686 * g + 0.168 * b)
            tb = int(0.272 * r + 0.534 * g + 0.131 * b)

            pixels[px, py] = (min(255, tr), min(255, tg), min(255, tb))

    return img


def apply_vintage_filter(img):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–Ω—Ç–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    img = img.convert('RGB')
    r, g, b = img.split()

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
    r = r.point(lambda i: i * 1.1)
    g = g.point(lambda i: i * 0.9)
    b = b.point(lambda i: i * 0.8)

    result = Image.merge('RGB', (r, g, b))
    result = result.filter(ImageFilter.SMOOTH)

    return result


def rotate_image(message):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        with Image.open(original_path) as img:
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
            rotated = img.rotate(90, expand=True)

            result_path = f"temp/{user_id}_result.jpg"
            rotated.save(result_path, "JPEG", quality=95)

            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption="‚úÖ –§–æ—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ 90¬∞!",
                    reply_markup=main_menu()
                )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ —Ñ–æ—Ç–æ")
        logging.error(f"Error rotating image: {e}")


def resize_image(message):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        with Image.open(original_path) as img:
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ 2 —Ä–∞–∑–∞
            width, height = img.size
            new_size = (width // 2, height // 2)
            resized = img.resize(new_size, Image.LANCZOS)

            result_path = f"temp/{user_id}_result.jpg"
            resized.save(result_path, "JPEG", quality=95)

            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω: {new_size[0]}x{new_size[1]}",
                    reply_markup=main_menu()
                )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞")
        logging.error(f"Error resizing image: {e}")


def crop_circle(message):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        with Image.open(original_path) as img:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
            mask = Image.new('L', img.size, 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0) + img.size, fill=255)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
            result = Image.new('RGBA', img.size)
            result.paste(img, (0, 0), mask=mask)

            result_path = f"temp/{user_id}_result.png"
            result.save(result_path, "PNG")

            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption="‚úÖ –ö—Ä—É–≥–ª–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!",
                    reply_markup=main_menu()
                )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–≥–ª–æ–≥–æ —Ñ–æ—Ç–æ")
        logging.error(f"Error cropping circle: {e}")


def add_frame(message, frame_type):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        with Image.open(original_path) as img:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É
            if frame_type == '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è':
                border_size = 20
                border_color = (255, 255, 255)
            elif frame_type == '–ø–æ–ª—è—Ä–æ–∏–¥':
                border_size = (40, 60, 40, 40)  # top, right, bottom, left
                border_color = (255, 255, 255)
            elif frame_type == '–∑–æ–ª–æ—Ç–∞—è':
                border_size = 15
                border_color = (255, 215, 0)
            else:  # –ø–ª–µ–Ω–∫–∞
                border_size = (30, 20, 30, 20)
                border_color = (0, 0, 0)

            if isinstance(border_size, int):
                result = ImageOps.expand(img, border=border_size, fill=border_color)
            else:
                result = ImageOps.expand(img, border=border_size, fill=border_color)

            result_path = f"temp/{user_id}_result.jpg"
            result.save(result_path, "JPEG", quality=95)

            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"‚úÖ –†–∞–º–∫–∞ '{frame_type}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                    reply_markup=main_menu()
                )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–º–∫–∏")
        logging.error(f"Error adding frame: {e}")


def add_text_to_image(message, text):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        with Image.open(original_path) as img:
            draw = ImageDraw.Draw(img)

            # –ü—Ä–æ—Å—Ç–æ–π —à—Ä–∏—Ñ—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π)
            try:
                font = ImageFont.truetype("arial.ttf", 40)
            except:
                font = ImageFont.load_default()

            # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            text_position = (50, 50)
            text_color = (255, 255, 255)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É
            draw.text((text_position[0] - 2, text_position[1] - 2), text, (0, 0, 0), font=font)
            draw.text((text_position[0] + 2, text_position[1] - 2), text, (0, 0, 0), font=font)
            draw.text((text_position[0] - 2, text_position[1] + 2), text, (0, 0, 0), font=font)
            draw.text((text_position[0] + 2, text_position[1] + 2), text, (0, 0, 0), font=font)

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text(text_position, text, text_color, font=font)

            result_path = f"temp/{user_id}_result.jpg"
            img.save(result_path, "JPEG", quality=95)

            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption="‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ!",
                    reply_markup=main_menu()
                )

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        logging.error(f"Error adding text: {e}")


def create_meme(message):
    try:
        user_id = message.chat.id
        original_path = f"temp/{user_id}_original.jpg"

        def create_meme(message):
            try:
                user_id = message.chat.id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
                original_path = f"temp/{user_id}_original.jpg"
                if not os.path.exists(original_path):
                    bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
                    return

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–º–∞
                user_states[user_id] = {
                    'waiting_for_meme_top': True,
                    'waiting_for_meme_bottom': False
                }

                bot.send_message(
                    message.chat.id,
                    "üí¨ *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –í–ï–†–•–ù–ï–ô —á–∞—Å—Ç–∏ –º–µ–º–∞:*",
                    parse_mode='Markdown'
                )

            except Exception as e:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞")
                logging.error(f"Error creating meme: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–º–∞
        @bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('waiting_for_meme_top'))
        def handle_meme_top_text(message):
            try:
                user_id = message.chat.id
                top_text = message.text

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
                user_states[user_id]['meme_top_text'] = top_text
                user_states[user_id]['waiting_for_meme_top'] = False
                user_states[user_id]['waiting_for_meme_bottom'] = True

                bot.send_message(
                    message.chat.id,
                    "üí¨ *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ù–ò–ñ–ù–ï–ô —á–∞—Å—Ç–∏ –º–µ–º–∞:*",
                    parse_mode='Markdown'
                )

            except Exception as e:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
                logging.error(f"Error handling meme text: {e}")

        @bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('waiting_for_meme_bottom'))
        def handle_meme_bottom_text(message):
            try:
                user_id = message.chat.id
                bottom_text = message.text

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
                top_text = user_states[user_id].get('meme_top_text', '')

                # –°–æ–∑–¥–∞–µ–º –º–µ–º
                create_meme_with_text(user_id, top_text, bottom_text)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_states[user_id]['waiting_for_meme_bottom'] = False
                del user_states[user_id]['meme_top_text']

            except Exception as e:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞")
                logging.error(f"Error creating meme with text: {e}")

        def create_meme_with_text(user_id, top_text, bottom_text):
            try:
                original_path = f"temp/{user_id}_original.jpg"

                with Image.open(original_path) as img:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if img.mode != 'RGB':
                        img = img.convert('RGB')

                    draw = ImageDraw.Draw(img)

                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –º–µ–º–æ–≤
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                        font_sizes = [40, 50, 60]
                        font = None

                        for size in font_sizes:
                            try:
                                font = ImageFont.truetype("arialbd.ttf", size)
                                break
                            except:
                                try:
                                    font = ImageFont.truetype("Arial", size)
                                    break
                                except:
                                    continue

                        if font is None:
                            font = ImageFont.load_default()

                    except Exception as font_error:
                        logging.error(f"Font error: {font_error}")
                        font = ImageFont.load_default()

                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –æ–±–≤–æ–¥–∫–æ–π
                    def add_meme_text(text, y_position):
                        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                        text_width = img.width - 40  # –û—Ç—Å—Ç—É–ø—ã –ø–æ –±–æ–∫–∞–º
                        font_size = 50

                        # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                        while font_size > 20:
                            try:
                                test_font = ImageFont.truetype("arialbd.ttf", font_size)
                                text_length = draw.textlength(text, font=test_font)
                                if text_length <= text_width:
                                    break
                            except:
                                pass
                            font_size -= 5

                        try:
                            font = ImageFont.truetype("arialbd.ttf", font_size)
                        except:
                            font = ImageFont.load_default()

                        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                        text_length = draw.textlength(text, font=font)
                        x_position = (img.width - text_length) // 2

                        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—É—é –æ–±–≤–æ–¥–∫—É
                        for dx in [-2, 0, 2]:
                            for dy in [-2, 0, 2]:
                                if dx != 0 or dy != 0:
                                    draw.text((x_position + dx, y_position + dy), text, (0, 0, 0), font=font)

                        # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –æ–±–≤–æ–¥–∫–∏
                        draw.text((x_position, y_position), text, (255, 255, 255), font=font)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
                    if top_text.strip():
                        add_meme_text(top_text.upper(), 10)

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
                    if bottom_text.strip():
                        text_height = 30  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
                        add_meme_text(bottom_text.upper(), img.height - text_height - 20)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result_path = f"temp/{user_id}_result.jpg"
                    img.save(result_path, "JPEG", quality=95)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    with open(result_path, 'rb') as photo:
                        bot.send_photo(
                            user_id,
                            photo,
                            caption="üòÇ *–í–∞—à –º–µ–º –≥–æ—Ç–æ–≤!*\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω?",
                            parse_mode='Markdown',
                            reply_markup=main_menu()
                        )

            except Exception as e:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞ —Å —Ç–µ–∫—Å—Ç–æ–º")
                logging.error(f"Error creating meme with text: {e}")

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞")
        logging.error(f"Error creating meme: {e}")


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
if __name__ == "__main__":
    print("üé® PhotoMagicBot –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!")

    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"Bot error: {e}")